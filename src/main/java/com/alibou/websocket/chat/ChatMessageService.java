package com.alibou.websocket.chat;

import com.alibou.websocket.chatroom.ChatInactivityService;
import com.alibou.websocket.chatroom.ChatRoomService;
import com.alibou.websocket.user.OnlineUserStore;
import com.alibou.websocket.user.User;
import com.alibou.websocket.user.UserRole;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicLong;

/**
 * In-memory —Å–µ—Ä–≤–∏—Å —Å–æ–æ–±—â–µ–Ω–∏–π.
 *
 *  ‚Ä¢ self-chat (A ‚Üí A) —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç ¬´–ª–∏—á–Ω—ã–π¬ª —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ—Ä–∞
 *  ‚Ä¢ REGULAR ‚Üí ENGINEER –∏ ENGINEER ‚Üí REGULAR —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞—é—Ç —Ç–∞–π–º–µ—Ä –ø–∞—Ä—ã
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ChatMessageService {

    private final ChatRoomService        chatRoomService;
    private final ChatInactivityService  inactivity;
    private final OnlineUserStore        store;

    /** chatId ‚Üí —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π */
    private final Map<String, List<ChatMessage>> chats = new ConcurrentHashMap<>();
    private final AtomicLong seq = new AtomicLong(1);

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏) –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã.
     */
    public ChatMessage save(ChatMessage chatMessage) {

        /* -------- –≤–∞–ª–∏–¥–∞—Ü–∏—è -------- */
        String senderId    = chatMessage.getSenderId();
        String recipientId = chatMessage.getRecipientId();
        if (senderId == null || recipientId == null) {
            log.error("‚ùå ChatMessage —Å–æ–¥–µ—Ä–∂–∏—Ç null senderId –∏–ª–∏ recipientId: {}", chatMessage);
            throw new IllegalArgumentException("senderId –∏ recipientId –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null");
        }
        log.info("‚û°Ô∏è –ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: sender={}, recipient={}, content={}",
                senderId, recipientId, chatMessage.getContent());

        /* -------- ¬´–ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è¬ª REGULAR-–∞, —É–∂–µ –∑–∞–Ω—è—Ç–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–æ–º -------- */
        Optional<User> senderOpt = store.get(senderId);
        if (senderOpt.isPresent()
                && senderOpt.get().getRole() == UserRole.REGULAR
                && chatRoomService.isUserInActiveChatWithEngineer(senderId)) {

            recipientId = chatRoomService.findActivePartner(senderId).orElse(recipientId);
            chatMessage.setRecipientId(recipientId);
        }

        /* -------- —Ä–æ–ª–∏ —Å—Ç–æ—Ä–æ–Ω -------- */
        Optional<User> recipientOpt = store.get(recipientId);
        User senderUser    = senderOpt.orElse(null);
        User recipientUser = recipientOpt.orElse(null);
        log.info("üé≠ –†–æ–ª–∏: senderRole={}, recipientRole={}",
                senderUser != null ? senderUser.getRole() : "null",
                recipientUser != null ? recipientUser.getRole() : "null");

        /* ===================================================================
           1. SELF-CHAT  (idA == idB)
           =================================================================== */
        if (senderId.equals(recipientId)) {
            chatMessage.setChatId(senderId + "_" + recipientId);

            if (senderUser != null && senderUser.getRole() == UserRole.REGULAR) {
                inactivity.cancelRegular(senderId);   // –±—ã–ª —Ç–∞–π–º–µ—Ä –ø—Ä–æ—Å—Ç–æ—è
                inactivity.touchRegular(senderId);    // –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            }
            if (senderUser != null && senderUser.getRole() == UserRole.ENGINEER) {
                inactivity.cancelEngineer(senderId);  // –∏–Ω–∂–µ–Ω–µ—Ä—É –ª–∏—á–Ω—ã–π —Ç–∞–π–º–µ—Ä –Ω–µ –Ω—É–∂–µ–Ω
            }
        }
        /* ===================================================================
           2. REGULAR ‚Üî ENGINEER
           =================================================================== */
        else {
            String cid = chatRoomService
                    .getChatRoomId(senderId, recipientId, /*createIfMissing*/ true)
                    .orElseThrow(() ->
                            new IllegalStateException("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"));
            chatMessage.setChatId(cid);

            if (senderUser != null && recipientUser != null) {

                /* REGULAR ‚Üí ENGINEER  (–∫–∞–∫ –±—ã–ª–æ) */
                if (senderUser.getRole() == UserRole.REGULAR &&
                        recipientUser.getRole() == UserRole.ENGINEER) {

                    inactivity.touch(recipientId, senderId);   // —Ç–∞–π–º–µ—Ä –ø–∞—Ä—ã
                    inactivity.touchRegular(senderId);         // –ª–∏—á–Ω—ã–π REGULAR
                }

                /* ENGINEER ‚Üí REGULAR  (–ø–∞—Ç—á) */
                if (senderUser.getRole() == UserRole.ENGINEER &&
                        recipientUser.getRole() == UserRole.REGULAR) {

                    inactivity.touch(senderId, recipientId);   // —Ç–∞–π–º–µ—Ä –ø–∞—Ä—ã
                    inactivity.cancelRegular(recipientId);     // ¬´–ª–∏—á–Ω—ã–π¬ª —Ç–∞–π–º–µ—Ä REGULAR–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
                }
            }
        }

        /* -------- —Å–æ—Ö—Ä–∞–Ω—è–µ–º -------- */
        chatMessage.setId(seq.getAndIncrement());
        chatMessage.setTimestamp(new Date());

        chats.computeIfAbsent(chatMessage.getChatId(),
                k -> new CopyOnWriteArrayList<>()).add(chatMessage);

        log.info("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ {} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ({} ‚Üí {})",
                chatMessage.getId(), senderId, recipientId);

        return chatMessage;
    }

    /** –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π) */
    public List<ChatMessage> findChatMessages(String senderId, String recipientId) {
        return chatRoomService
                .getChatRoomId(senderId, recipientId, false)
                .map(id -> new ArrayList<>(
                        chats.getOrDefault(id, Collections.emptyList())))
                .orElseGet(ArrayList::new);
    }

    /** –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç–µ—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é (engineerId, userId) */
    public void clearHistory(String engineerId, String userId) {
        String chatId = engineerId + "_" + userId;
        chats.remove(chatId);
        log.info("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ {} —É–¥–∞–ª–µ–Ω–∞", chatId);
    }
}
