package com.alibou.websocket.chatroom;

import com.alibou.websocket.chat.ChatMessageService;
import com.alibou.websocket.user.OnlineUserStore;
import com.alibou.websocket.user.Status;
import com.alibou.websocket.user.User;
import com.alibou.websocket.user.UserRole;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Lazy;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@Slf4j
public class ChatRoomService {

    private final ChatRoomRepository chatRoomRepository;
    private final OnlineUserStore store;
    private final SimpMessagingTemplate messagingTemplate;
    private final ChatInactivityService inactivity;

    // –õ–µ–Ω–∏–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    private final @Lazy ChatMessageService messageService;

    public ChatRoomService(ChatRoomRepository chatRoomRepository,
                           OnlineUserStore store,
                           SimpMessagingTemplate messagingTemplate,
                           @Lazy ChatInactivityService inactivity,
                           @Lazy ChatMessageService messageService) {
        this.chatRoomRepository = chatRoomRepository;
        this.store = store;
        this.messagingTemplate = messagingTemplate;
        this.inactivity = inactivity;
        this.messageService = messageService;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–π–º-–∞—É—Ç: –µ—Å–ª–∏ REGULAR –Ω–µ –ø–∏—Å–∞–ª –∏–Ω–∂–µ–Ω–µ—Ä 15 —Å–µ–∫—É–Ω–¥,
     * –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç —ç—Ç–æ–≥–æ REGULAR-–∞ –∏–∑ –æ–Ω–ª–∞–π–Ω–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–∞—Ä—É.
     */
    public void handleInactivity(String engineerId, String userId) {
        // 1) –°–Ω–∏–º–∞–µ–º REGULAR-–∞ –∏–∑ –æ–Ω–ª–∞–π–Ω–∞
        store.forceRemove(userId);

        // 2) –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö, —á—Ç–æ REGULAR —Å—Ç–∞–ª OFFLINE
        messagingTemplate.convertAndSend(
                "/topic/public",
                new User(userId, Status.OFFLINE, UserRole.REGULAR)
        );

        // 3) –ì–∞—Å–∏–º —á–∞—Ç engineer ‚Üî user
        deactivatePair(engineerId, userId);

        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤—ã—à–µ–ª –ø–æ 15-—Å–µ–∫—É–Ω–¥–Ω–æ–º—É —Ç–∞–π–º-–∞—É—Ç—É", userId);
    }

    public boolean isUserInActiveChat(String nick) {
        return chatRoomRepository
                .findAllBySenderIdAndActiveTrue(nick).stream()
                .anyMatch(ChatRoom::isActive)
                || chatRoomRepository
                .findAllByRecipientIdAndActiveTrue(nick).stream()
                .anyMatch(ChatRoom::isActive);
    }

    /** –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ (–µ—Å–ª–∏ –æ–Ω —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω) */
    public Optional<String> findActivePartner(String nick) {
        return chatRoomRepository
                .findAllBySenderIdAndActiveTrue(nick).stream()
                .findFirst()
                .map(ChatRoom::getRecipientId);
    }

    /**
     * –ï—Å–ª–∏ createNewRoomIfNotExists = true –∏ –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç—ã,
     * —Å–æ–∑–¥–∞—ë—Ç –µ—ë (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ), –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—è ¬´–∑–∞–Ω—è—Ç–æ—Å—Ç—å¬ª.
     */
    public Optional<String> getChatRoomId(String senderId,
                                          String recipientId,
                                          boolean createIfMissing) {

        /* ---------- self-chat ---------- */
        if (senderId.equals(recipientId)) {
            return Optional.of(senderId + "_" + recipientId);
        }

        String cid = pairId(senderId, recipientId);   //  A_B  –ª–∏–±–æ  B_A

        /* 1) —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å? */
        Optional<ChatRoom> existing = chatRoomRepository.findByChatId(cid);
        if (existing.isPresent()) return Optional.of(cid);

        /* 2) –Ω–µ—Ç –∏ –Ω–µ –Ω–∞–¥–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å? */
        if (!createIfMissing) return Optional.empty();

        /* 3) —Å–æ–∑–¥–∞—ë–º –¥–≤–µ –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ */
        ChatRoom r1 = ChatRoom.builder()
                .chatId(cid).senderId(senderId)
                .recipientId(recipientId).active(true).build();
        ChatRoom r2 = ChatRoom.builder()
                .chatId(cid).senderId(recipientId)
                .recipientId(senderId).active(true).build();

        chatRoomRepository.save(r1);
        chatRoomRepository.save(r2);
        return Optional.of(cid);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ chatId –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î.
     */
    // –í—Å—Ç–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞

// 1. üîÅ –í createChatId:
    private String createChatId(String a, String b) {

        String chatId = pairId(a, b);          // üëà —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π id

        // –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å ‚Äì –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å
        if (chatRoomRepository.findByChatId(chatId).isPresent()) {
            return chatId;
        }

        ChatRoom r1 = ChatRoom.builder()
                .chatId(chatId).senderId(a)
                .recipientId(b).active(true).build();
        ChatRoom r2 = ChatRoom.builder()
                .chatId(chatId).senderId(b)
                .recipientId(a).active(true).build();

        chatRoomRepository.save(r1);
        chatRoomRepository.save(r2);

        log.info("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ {} ({} ‚Üî {})", chatId, a, b);
        return chatId;
    }


    public boolean isUserInActiveChatWithEngineer(String userId) {
        List<ChatRoom> allActiveRooms = new ArrayList<>();
        allActiveRooms.addAll(chatRoomRepository.findAllBySenderIdAndActiveTrue(userId));
        allActiveRooms.addAll(chatRoomRepository.findAllByRecipientIdAndActiveTrue(userId));

        for (ChatRoom room : allActiveRooms) {
            String otherSide = room.getSenderId().equals(userId)
                    ? room.getRecipientId()
                    : room.getSenderId();
            // –ï—Å–ª–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ ‚Äî –∏–Ω–∂–µ–Ω–µ—Ä, –∑–Ω–∞—á–∏—Ç user –∑–∞–Ω—è—Ç:
            User otherUser = store.get(otherSide).orElse(null);
            if (otherUser != null && otherUser.getRole() == UserRole.ENGINEER) {
                return true;
            }
        }
        return false;
    }

    private boolean isUserEngineerAndRegularBusy(String senderId, String recipientId) {
        User sender = store.get(senderId).orElse(null);
        User recipient = store.get(recipientId).orElse(null);

        if (sender == null || recipient == null) return false;

        // engineer ‚Üí regular
        if (sender.getRole() == UserRole.ENGINEER && recipient.getRole() == UserRole.REGULAR) {
            return isUserInActiveChatWithEngineer(recipient.getNickName());
        }
        // regular ‚Üí engineer
        if (recipient.getRole() == UserRole.ENGINEER && sender.getRole() == UserRole.REGULAR) {
            return isUserInActiveChatWithEngineer(sender.getNickName());
        }
        return false;
    }

    public String activateChat(String engineerId, String userId) {
        ChatRoom room = chatRoomRepository.findByChatId(pairId(engineerId, userId))
                .orElse(null);

        boolean stateChanged = false;

        if (room == null) {
            createChatId(engineerId, userId); // active=true –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã
            room = chatRoomRepository
                    .findAllBySenderIdAndRecipientId(engineerId, userId)
                    .stream()
                    .findFirst()
                    .orElseThrow();
            stateChanged = true;
        } else if (!room.isActive()) {
            room.setActive(true);
            chatRoomRepository.save(room);
            stateChanged = true;
        }

        chatRoomRepository
                .findAllBySenderIdAndRecipientId(userId, engineerId)
                .stream()
                .findFirst()
                .ifPresent(mirror -> {
                    if (!mirror.isActive()) {
                        mirror.setActive(true);
                        chatRoomRepository.save(mirror);
                    }
                });

        if (stateChanged) {
            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ó–ê–ù–Ø–¢ –∏–Ω–∂–µ–Ω–µ—Ä–æ–º {}", userId, engineerId);
            messagingTemplate.convertAndSend(
                    "/topic/user-status",
                    new UserBusyStatus(userId, true));
        }

        inactivity.touch(engineerId, userId);
        inactivity.cancelEngineer(engineerId);

        return room.getChatId();
    }
    /** –û–¥–∏–Ω–∞–∫–æ–≤—ã–π chatId –¥–ª—è –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –ø–∞—Ä—ã, –Ω–µ –≤–∞–∂–Ω–æ –∫—Ç–æ –ø–∏—à–µ—Ç –ø–µ—Ä–≤—ã–º */
    private static String pairId(String a, String b) {
        return a.compareTo(b) < 0 ? a + "_" + b : b + "_" + a;
    }
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—Ä—É engineer ‚Üî user, —Å—Ç–∞–≤–∏–º –∏—Ö ¬´—Å–≤–æ–±–æ–¥–Ω—ã–º–∏¬ª.
     */
    public void deactivatePair(String engineerId, String userId) {
        boolean stateChanged = false;

        List<ChatRoom> directRooms = chatRoomRepository.findAllBySenderIdAndRecipientId(engineerId, userId);
        List<ChatRoom> mirrorRooms = chatRoomRepository.findAllBySenderIdAndRecipientId(userId, engineerId);

        for (ChatRoom room : directRooms) {
            if (room.isActive()) {
                room.setActive(false);
                chatRoomRepository.save(room);
                stateChanged = true;
            }
        }

        for (ChatRoom room : mirrorRooms) {
            if (room.isActive()) {
                room.setActive(false);
                chatRoomRepository.save(room);
                stateChanged = true;
            }
        }

        if (stateChanged) {
            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –°–í–û–ë–û–î–ï–ù (–∏–Ω–∂–µ–Ω–µ—Ä {})", userId, engineerId);
            messagingTemplate.convertAndSend(
                    "/topic/user-status",
                    new UserBusyStatus(userId, false));
        }

        inactivity.cancel(engineerId, userId);
        messageService.clearHistory(engineerId, userId);

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        chatRoomRepository.deleteAll(directRooms);
        chatRoomRepository.deleteAll(mirrorRooms);

        if (!userId.equals(engineerId)) {
            createChatId(userId, userId);
            log.info("–°–æ–∑–¥–∞–Ω self-chat –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
        }
    }


    /**
     * –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞) ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ.
     */
    public void deactivateChatsForUser(String userId) {
        List<ChatRoom> senderRooms = chatRoomRepository.findAllBySenderId(userId);
        List<ChatRoom> recipientRooms = chatRoomRepository.findAllByRecipientId(userId);

        List<ChatRoom> allRooms = new ArrayList<>();
        allRooms.addAll(senderRooms);
        allRooms.addAll(recipientRooms);

        for (ChatRoom room : allRooms) {
            room.setActive(false);
        }
        chatRoomRepository.saveAll(allRooms);
        log.info("–í—Å–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", userId);
    }
}
