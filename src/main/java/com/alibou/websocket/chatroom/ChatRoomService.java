//package com.alibou.websocket.chatroom;
//
//import com.alibou.websocket.chat.ChatMessageService;
//import com.alibou.websocket.user.OnlineUserStore;
//import com.alibou.websocket.user.Status;
//import com.alibou.websocket.user.User;
//import com.alibou.websocket.user.UserRole;
//import lombok.RequiredArgsConstructor;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.context.annotation.Lazy;
//import org.springframework.messaging.simp.SimpMessagingTemplate;
//import org.springframework.stereotype.Service;
//
//import java.util.ArrayList;
//import java.util.List;
//import java.util.Map;
//import java.util.Optional;
//import java.util.concurrent.ConcurrentHashMap;
//
//@Service
//@Slf4j
//public class ChatRoomService {
//    private static final Map<String, Object> CHAT_LOCKS = new ConcurrentHashMap<>();
//    private final ChatRoomRepository chatRoomRepository;
//    private final OnlineUserStore store;
//    private final SimpMessagingTemplate messagingTemplate;
//    private final ChatInactivityService inactivity;
//
//    // –õ–µ–Ω–∏–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
//    private final @Lazy ChatMessageService messageService;
//
//    public ChatRoomService(ChatRoomRepository chatRoomRepository,
//                           OnlineUserStore store,
//                           SimpMessagingTemplate messagingTemplate,
//                           @Lazy ChatInactivityService inactivity,
//                           @Lazy ChatMessageService messageService) {
//        this.chatRoomRepository = chatRoomRepository;
//        this.store = store;
//        this.messagingTemplate = messagingTemplate;
//        this.inactivity = inactivity;
//        this.messageService = messageService;
//    }
//
//    /**
//     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–π–º-–∞—É—Ç: –µ—Å–ª–∏ REGULAR –Ω–µ –ø–∏—Å–∞–ª –∏–Ω–∂–µ–Ω–µ—Ä 15 —Å–µ–∫—É–Ω–¥,
//     * –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç —ç—Ç–æ–≥–æ REGULAR-–∞ –∏–∑ –æ–Ω–ª–∞–π–Ω–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–∞—Ä—É.
//     */
//    public void handleInactivity(String engineerId, String userId) {
//        // 1) –°–Ω–∏–º–∞–µ–º REGULAR-–∞ –∏–∑ –æ–Ω–ª–∞–π–Ω–∞
//        store.forceRemove(userId);
//
//        // 2) –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö, —á—Ç–æ REGULAR —Å—Ç–∞–ª OFFLINE
//        messagingTemplate.convertAndSend(
//                "/topic/public",
//                new User(userId, Status.OFFLINE, UserRole.REGULAR)
//        );
//
//        // 3) –ì–∞—Å–∏–º —á–∞—Ç engineer ‚Üî user
//        deactivatePair(engineerId, userId);
//
//        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤—ã—à–µ–ª –ø–æ 15-—Å–µ–∫—É–Ω–¥–Ω–æ–º—É —Ç–∞–π–º-–∞—É—Ç—É", userId);
//    }
//
//    public boolean isUserInActiveChat(String nick) {
//        return chatRoomRepository
//                .findAllBySenderIdAndActiveTrue(nick).stream()
//                .anyMatch(ChatRoom::isActive)
//                || chatRoomRepository
//                .findAllByRecipientIdAndActiveTrue(nick).stream()
//                .anyMatch(ChatRoom::isActive);
//    }
//
//    /** –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ (–µ—Å–ª–∏ –æ–Ω —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω) */
//    public Optional<String> findActivePartner(String nick) {
//        return chatRoomRepository
//                .findAllBySenderIdAndActiveTrue(nick).stream()
//                .findFirst()
//                .map(ChatRoom::getRecipientId);
//    }
//
//    public Optional<String> getChatRoomId(String senderId,
//                                          String recipientId,
//                                          boolean createIfMissing) {
//
//        /* self-chat */
//        if (senderId.equals(recipientId)) {
//            return Optional.of(senderId + "_" + recipientId);
//        }
//
//        String cid  = pairId(senderId, recipientId);            // A_B –∏–ª–∏ B_A
//        if (!chatRoomRepository.findAllByChatId(cid).isEmpty()) // —É–∂–µ –µ—Å—Ç—å
//            return Optional.of(cid);
//
//        if (!createIfMissing)                                   // –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å?
//            return Optional.empty();
//
//        /* —Å–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É –ø–æ–¥ –ª–æ–∫–æ–º ‚Üí —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç –≤—Å—Ç–∞–≤–∫—É */
//        Object lock = CHAT_LOCKS.computeIfAbsent(cid, k -> new Object());
//        synchronized (lock) {
//            if (chatRoomRepository.findAllByChatId(cid).isEmpty()) {
//                createChatId(senderId, recipientId);            // –¥–≤–µ –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
//            }
//        }
//        return Optional.of(cid);
//    }
//
//    /**
//     * –°–æ–∑–¥–∞–Ω–∏–µ chatId –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î.
//     */
//    // –í—Å—Ç–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞
//
//// 1. üîÅ –í createChatId:
//    private String createChatId(String a, String b) {
//
//        String chatId = pairId(a, b);          // A_B  –∏–ª–∏  B_A
//        Object lock   = CHAT_LOCKS.computeIfAbsent(chatId, k -> new Object());
//
//        synchronized (lock) {
//            // –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–∂–µ —É—Å–ø–µ–ª –≤—Å—Ç–∞–≤–∏—Ç—å ‚Äì –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
//            if (!chatRoomRepository.findAllByChatId(chatId).isEmpty()) {
//                return chatId;
//            }
//
//            // –∏–Ω–∞—á–µ –ø–∏—à–µ–º –î–í–ï –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
//            ChatRoom r1 = ChatRoom.builder()
//                    .chatId(chatId).senderId(a).recipientId(b).active(true).build();
//            ChatRoom r2 = ChatRoom.builder()
//                    .chatId(chatId).senderId(b).recipientId(a).active(true).build();
//            chatRoomRepository.save(r1);
//            chatRoomRepository.save(r2);
//            log.info("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ {} ({} ‚Üî {})", chatId, a, b);
//            return chatId;
//        }
//    }
//
//
//
//    public boolean isUserInActiveChatWithEngineer(String userId) {
//        List<ChatRoom> allActiveRooms = new ArrayList<>();
//        allActiveRooms.addAll(chatRoomRepository.findAllBySenderIdAndActiveTrue(userId));
//        allActiveRooms.addAll(chatRoomRepository.findAllByRecipientIdAndActiveTrue(userId));
//
//        for (ChatRoom room : allActiveRooms) {
//            String otherSide = room.getSenderId().equals(userId)
//                    ? room.getRecipientId()
//                    : room.getSenderId();
//            // –ï—Å–ª–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ ‚Äî –∏–Ω–∂–µ–Ω–µ—Ä, –∑–Ω–∞—á–∏—Ç user –∑–∞–Ω—è—Ç:
//            User otherUser = store.get(otherSide).orElse(null);
//            if (otherUser != null && otherUser.getRole() == UserRole.ENGINEER) {
//                return true;
//            }
//        }
//        return false;
//    }
//
//    private boolean isUserEngineerAndRegularBusy(String senderId, String recipientId) {
//        User sender = store.get(senderId).orElse(null);
//        User recipient = store.get(recipientId).orElse(null);
//
//        if (sender == null || recipient == null) return false;
//
//        // engineer ‚Üí regular
//        if (sender.getRole() == UserRole.ENGINEER && recipient.getRole() == UserRole.REGULAR) {
//            return isUserInActiveChatWithEngineer(recipient.getNickName());
//        }
//        // regular ‚Üí engineer
//        if (recipient.getRole() == UserRole.ENGINEER && sender.getRole() == UserRole.REGULAR) {
//            return isUserInActiveChatWithEngineer(sender.getNickName());
//        }
//        return false;
//    }
//
//    public String activateChat(String engineerId, String userId) {
//
//        String cid  = pairId(engineerId, userId);                       // –æ–±—â–∏–π id
//        ChatRoom room = chatRoomRepository.findAllByChatId(cid)         // ¬´–ª—é–±–æ–π –ø–µ—Ä–≤—ã–π¬ª
//                .stream()
//                .findFirst()
//                .orElse(null);
//
//        boolean stateChanged = false;
//
//        if (room == null) {                                             // –∫–æ–º–Ω–∞—Ç—ã –Ω–µ—Ç
//            createChatId(engineerId, userId);
//            room = chatRoomRepository.findAllByChatId(cid).stream()
//                    .findFirst()
//                    .orElseThrow();
//            stateChanged = true;
//        } else if (!room.isActive()) {                                  // –±—ã–ª–∞, –Ω–æ –ø–∞—Å—Å–∏–≤–Ω–∞
//            room.setActive(true);
//            chatRoomRepository.save(room);
//            stateChanged = true;
//        }
//
//        /* –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–µ—Ä–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–∞—Å—Å–∏–≤–Ω–∞ */
//        chatRoomRepository.findAllByChatId(cid).forEach(mirror -> {
//            if (!mirror.isActive()) {
//                mirror.setActive(true);
//                chatRoomRepository.save(mirror);
//            }
//        });
//
//        if (stateChanged) {
//            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ó–ê–ù–Ø–¢ –∏–Ω–∂–µ–Ω–µ—Ä–æ–º {}", userId, engineerId);
//            messagingTemplate.convertAndSend("/topic/user-status",
//                    new UserBusyStatus(userId, true));
//        }
//
//        inactivity.touch(engineerId, userId);
//        inactivity.cancelEngineer(engineerId);
//
//        return room.getChatId();      // == cid
//    }
//    /** –û–¥–∏–Ω–∞–∫–æ–≤—ã–π chatId –¥–ª—è –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –ø–∞—Ä—ã, –Ω–µ –≤–∞–∂–Ω–æ –∫—Ç–æ –ø–∏—à–µ—Ç –ø–µ—Ä–≤—ã–º */
//    private static String pairId(String a, String b) {
//        return a.compareTo(b) < 0 ? a + "_" + b : b + "_" + a;
//    }
//    /**
//     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—Ä—É engineer ‚Üî user, —Å—Ç–∞–≤–∏–º –∏—Ö ¬´—Å–≤–æ–±–æ–¥–Ω—ã–º–∏¬ª.
//     */
//    public void deactivatePair(String engineerId, String userId) {
//        boolean stateChanged = false;
//
//        List<ChatRoom> directRooms = chatRoomRepository.findAllBySenderIdAndRecipientId(engineerId, userId);
//        List<ChatRoom> mirrorRooms = chatRoomRepository.findAllBySenderIdAndRecipientId(userId, engineerId);
//
//        for (ChatRoom room : directRooms) {
//            if (room.isActive()) {
//                room.setActive(false);
//                chatRoomRepository.save(room);
//                stateChanged = true;
//            }
//        }
//
//        for (ChatRoom room : mirrorRooms) {
//            if (room.isActive()) {
//                room.setActive(false);
//                chatRoomRepository.save(room);
//                stateChanged = true;
//            }
//        }
//
//        if (stateChanged) {
//            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –°–í–û–ë–û–î–ï–ù (–∏–Ω–∂–µ–Ω–µ—Ä {})", userId, engineerId);
//            messagingTemplate.convertAndSend(
//                    "/topic/user-status",
//                    new UserBusyStatus(userId, false));
//        }
//
//        inactivity.cancel(engineerId, userId);
//        messageService.clearHistory(engineerId, userId);
//
//        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
//        chatRoomRepository.deleteAll(directRooms);
//        chatRoomRepository.deleteAll(mirrorRooms);
//
//        if (!userId.equals(engineerId)) {
//            createChatId(userId, userId);
//            log.info("–°–æ–∑–¥–∞–Ω self-chat –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
//        }
//    }
//
//
//    /**
//     * –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞) ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ.
//     */
//    public void deactivateChatsForUser(String userId) {
//        List<ChatRoom> senderRooms = chatRoomRepository.findAllBySenderId(userId);
//        List<ChatRoom> recipientRooms = chatRoomRepository.findAllByRecipientId(userId);
//
//        List<ChatRoom> allRooms = new ArrayList<>();
//        allRooms.addAll(senderRooms);
//        allRooms.addAll(recipientRooms);
//
//        for (ChatRoom room : allRooms) {
//            room.setActive(false);
//        }
//        chatRoomRepository.saveAll(allRooms);
//        log.info("–í—Å–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", userId);
//    }
//}
package com.alibou.websocket.chatroom;

import com.alibou.websocket.chat.ChatMessageService;
import com.alibou.websocket.user.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Lazy;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é in-memory-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç-–∫–æ–º–Ω–∞—Ç–∞–º–∏.
 * <p>
 * –í–µ—Å—å JPA-—Å–ª–æ–π (ChatRoomRepository + @Entity ChatRoom) —É–¥–∞–ª—ë–Ω,
 * –ø–æ—ç—Ç–æ–º—É –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ–ø–µ—Ä–∞¬≠—Ç–∏–≤¬≠–Ω–æ–π –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏
 * –æ–±–Ω—É–ª—è—é—Ç—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 */
@Service
@Slf4j
public class ChatRoomService {

    /** thread-safe –∫–∞—Ä—Ç–∞ ¬´pairId  ‚Üí  ChatRoom¬ª */
    private final Map<String, ChatRoom> rooms = new ConcurrentHashMap<>();

    /* ==== —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã ==== */
    private final OnlineUserStore        store;
    private final SimpMessagingTemplate  messaging;
    private final ChatInactivityService  inactivity;
    private final ChatMessageService     messageService;

    public ChatRoomService(OnlineUserStore store,
                           SimpMessagingTemplate messaging,
                           @Lazy ChatInactivityService inactivity,
                           @Lazy ChatMessageService messageService) {
        this.store          = store;
        this.messaging      = messaging;
        this.inactivity     = inactivity;
        this.messageService = messageService;
    }

    /* =======================================================================
                                   –£–¢–ò–õ–ò–¢–´
       ======================================================================= */

    /** –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π id –¥–ª—è –ø–∞—Ä—ã, –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ—Ä–æ–Ω –Ω–µ –≤–∞–∂–µ–Ω */
    public static String pairId(String a, String b) {
        return a.compareTo(b) < 0 ? a + '_' + b : b + '_' + a;
    }

    /* =======================================================================
                           PUBLIC API (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–Ω–∞—Ä—É–∂–∏)
       ======================================================================= */

    /**
     * –í–µ—Ä–Ω—É—Ç—å chatId –ø–∞—Ä—ã, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–≤ –µ–≥–æ.
     * –î–ª—è self-—á–∞—Ç–∞ (A ‚Üí A) chatId = "A_A".
     */
    public Optional<String> getChatRoomId(String senderId,
                                          String recipientId,
                                          boolean createIfMissing) {

        /* self-chat ---------------------------------------- */
        if (senderId.equals(recipientId)) {
            return Optional.of(senderId + '_' + recipientId);
        }

        /* engineer ‚Üî regular ------------------------------- */
        String cid = pairId(senderId, recipientId);

        if (rooms.containsKey(cid)) return Optional.of(cid);
        if (!createIfMissing)       return Optional.empty();

        /* —Å–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –Ω–∏—Ç—å –µ—â—ë –Ω–µ —É—Å–ø–µ–ª–∞ */
        rooms.computeIfAbsent(cid, k -> new ChatRoom(cid, senderId, recipientId, true));
        log.info("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ {} ({} ‚Üî {})", cid, senderId, recipientId);

        return Optional.of(cid);
    }

    /** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—å –≤ –æ–¥–Ω–æ–º –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ? */
    public boolean isUserInActiveChat(String nick) {
        return rooms.values().stream()
                .anyMatch(r -> r.isActive() &&
                        (r.getSenderId().equals(nick) || r.getRecipientId().equals(nick)));
    }

    /** –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ (–µ—Å–ª–∏ –æ–Ω —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω) */
    public Optional<String> findActivePartner(String nick) {
        return rooms.values().stream()
                .filter(r -> r.isActive() &&
                        (r.getSenderId().equals(nick) || r.getRecipientId().equals(nick)))
                .findFirst()
                .map(r -> r.getSenderId().equals(nick) ? r.getRecipientId() : r.getSenderId());
    }

    /** –ò–Ω–∂–µ–Ω–µ—Ä ¬´–±–µ—Ä—ë—Ç¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–±–æ—Ç—É */
    public String activateChat(String engineerId, String userId) {
        String cid  = pairId(engineerId, userId);
        ChatRoom r  = rooms.computeIfAbsent(cid,
                k -> new ChatRoom(cid, engineerId, userId, true));

        boolean stateChanged = !r.isActive();
        r.setActive(true);

        if (stateChanged) {
            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ó–ê–ù–Ø–¢ –∏–Ω–∂–µ–Ω–µ—Ä–æ–º {}", userId, engineerId);
            messaging.convertAndSend("/topic/user-status",
                    new UserBusyStatus(userId, true));
        }

        inactivity.touch(engineerId, userId);
        inactivity.cancelEngineer(engineerId);

        return cid;
    }

    /** –ò–Ω–∂–µ–Ω–µ—Ä ¬´–æ—Ç–ø—É—Å–∫–∞–µ—Ç¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª —Å–∞–º */
    public void deactivatePair(String engineerId, String userId) {

        String cid = pairId(engineerId, userId);
        ChatRoom r = rooms.get(cid);

        boolean stateChanged = r != null && r.isActive();
        if (r != null) r.setActive(false);

        if (stateChanged) {
            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –°–í–û–ë–û–î–ï–ù (–∏–Ω–∂–µ–Ω–µ—Ä {})", userId, engineerId);
            messaging.convertAndSend("/topic/user-status",
                    new UserBusyStatus(userId, false));
        }

        inactivity.cancel(engineerId, userId);
        messageService.clearHistory(engineerId, userId);
        rooms.remove(cid);                       // –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–±–∏—Ä–∞–µ–º –ø–∞—Ä—É

        /* –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º self-chat –¥–ª—è REGULAR-–∞ */
        if (!userId.equals(engineerId)) {
            rooms.putIfAbsent(userId + '_' + userId,
                    new ChatRoom(userId + '_' + userId, userId, userId, false));
        }
    }

    /** –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äì –¥–µ–ª–∞–µ–º –≤—Å–µ –µ–≥–æ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ */
    public void deactivateChatsForUser(String userId) {
        rooms.values().forEach(r -> {
            if (r.getSenderId().equals(userId) || r.getRecipientId().equals(userId)) {
                r.setActive(false);
            }
        });
        log.info("–í—Å–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", userId);
    }

    /* =======================================================================
                        –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ï–¢–û–î–´, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–º —Å–ª–æ—è–º
       ======================================================================= */

    /** REGULAR ¬´–∑–∞–Ω—è—Ç¬ª –∏–Ω–∂–µ–Ω–µ—Ä–æ–º? */
    public boolean isUserInActiveChatWithEngineer(String userId) {
        return rooms.values().stream()
                .filter(ChatRoom::isActive)
                .filter(r -> r.getSenderId().equals(userId)
                        || r.getRecipientId().equals(userId))
                .anyMatch(r -> {
                    String other = r.getSenderId().equals(userId)
                            ? r.getRecipientId() : r.getSenderId();
                    return store.get(other)
                            .map(u -> u.getRole() == UserRole.ENGINEER)
                            .orElse(false);
                });
    }

    /* =======================================================================
                                  TIMEOUT-callback
       ======================================================================= */

    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è ChatInactivityService-–æ–º, –µ—Å–ª–∏ REGULAR –Ω–µ –ø–æ–ª—É—á–∏–ª
     * ¬´–∫–∞—Å–∞–Ω–∏–µ¬ª –æ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥.
     */
    public void handleInactivity(String engineerId, String userId) {
        /* 1) —É–¥–∞–ª—è–µ–º REGULAR-–∞ –∏–∑ –æ–Ω–ª–∞–π–Ω–∞ */
        store.forceRemove(userId);

        /* 2) —à–ª—ë–º –≤—Å–µ–º OFFLINE */
        messaging.convertAndSend(
                "/topic/public",
                new User(userId, Status.OFFLINE, UserRole.REGULAR)
        );

        /* 3) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—Ä—É */
        deactivatePair(engineerId, userId);

        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤—ã—à–µ–ª –ø–æ 15-—Å–µ–∫—É–Ω–¥–Ω–æ–º—É —Ç–∞–π–º-–∞—É—Ç—É", userId);
    }
}
